/* tslint:disable */
/* eslint-disable */
/**
 * Clash Bot Service
 * # Welcome to Clash Bot!   Where all of your League of Legends Clash scheduling needs are met!  ## Purpose  Clash Bot Webapp Service to support League of Legends Clash tournament scheduling with Discord.  ## Disclaimer  Clash-Bot is not endorsed by Riot Games and does not reflect the views or opinions of Riot Games or  anyone officially involved in producing or managing League of Legends. League of Legends and Riot Games  are trademarks or registered trademarks of Riot Games, Inc. League of Legends Â© Riot Games, Inc. 
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: rixxroid@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { BaseTournament } from './BaseTournament';
import {
    BaseTournamentFromJSON,
    BaseTournamentFromJSONTyped,
    BaseTournamentToJSON,
} from './BaseTournament';
import type { TentativePlayer } from './TentativePlayer';
import {
    TentativePlayerFromJSON,
    TentativePlayerFromJSONTyped,
    TentativePlayerToJSON,
} from './TentativePlayer';

/**
 * A queue for Players unsure if they will play Clash for a given Tournament.
 * @export
 * @interface Tentative
 */
export interface Tentative {
    /**
     * Unique identifier for the Tentative Queue.
     * @type {string}
     * @memberof Tentative
     */
    id?: string;
    /**
     * The default Discord Server id for the player to use.
     * @type {string}
     * @memberof Tentative
     */
    serverId?: string;
    /**
     * 
     * @type {BaseTournament}
     * @memberof Tentative
     */
    tournamentDetails?: BaseTournament;
    /**
     * 
     * @type {Array<TentativePlayer>}
     * @memberof Tentative
     */
    tentativePlayers?: Array<TentativePlayer>;
    /**
     * The timestamp that the object was updated at
     * @type {Date}
     * @memberof Tentative
     */
    lastUpdatedAt?: Date;
}

/**
 * Check if a given object implements the Tentative interface.
 */
export function instanceOfTentative(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function TentativeFromJSON(json: any): Tentative {
    return TentativeFromJSONTyped(json, false);
}

export function TentativeFromJSONTyped(json: any, ignoreDiscriminator: boolean): Tentative {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': !exists(json, 'id') ? undefined : json['id'],
        'serverId': !exists(json, 'serverId') ? undefined : json['serverId'],
        'tournamentDetails': !exists(json, 'tournamentDetails') ? undefined : BaseTournamentFromJSON(json['tournamentDetails']),
        'tentativePlayers': !exists(json, 'tentativePlayers') ? undefined : ((json['tentativePlayers'] as Array<any>).map(TentativePlayerFromJSON)),
        'lastUpdatedAt': !exists(json, 'lastUpdatedAt') ? undefined : (new Date(json['lastUpdatedAt'])),
    };
}

export function TentativeToJSON(value?: Tentative | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'serverId': value.serverId,
        'tournamentDetails': BaseTournamentToJSON(value.tournamentDetails),
        'tentativePlayers': value.tentativePlayers === undefined ? undefined : ((value.tentativePlayers as Array<any>).map(TentativePlayerToJSON)),
        'lastUpdatedAt': value.lastUpdatedAt === undefined ? undefined : (value.lastUpdatedAt.toISOString()),
    };
}


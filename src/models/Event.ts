/* tslint:disable */
/* eslint-disable */
/**
 * Clash Bot Service
 * # Welcome to Clash Bot!   Where all of your League of Legends Clash scheduling needs are met!  ## Purpose  Clash Bot Webapp Service to support League of Legends Clash tournament scheduling with Discord.  ## Disclaimer  Clash-Bot is not endorsed by Riot Games and does not reflect the views or opinions of Riot Games or  anyone officially involved in producing or managing League of Legends. League of Legends and Riot Games  are trademarks or registered trademarks of Riot Games, Inc. League of Legends Â© Riot Games, Inc. 
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: rixxroid@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { TeamEvent } from './TeamEvent';
import {
    TeamEventFromJSON,
    TeamEventFromJSONTyped,
    TeamEventToJSON,
} from './TeamEvent';

/**
 * A websocket event to be published.
 * @export
 * @interface Event
 */
export interface Event {
    /**
     * The unique identifier for the event.
     * @type {string}
     * @memberof Event
     */
    id: string;
    /**
     * 
     * @type {TeamEvent}
     * @memberof Event
     */
    teamEvent: TeamEvent;
    /**
     * A message to describe the event.
     * @type {string}
     * @memberof Event
     */
    summary?: string;
    /**
     * The Discord server id attached to the event.
     * @type {string}
     * @memberof Event
     */
    serverId: string;
    /**
     * Who the event was caused by.
     * @type {string}
     * @memberof Event
     */
    causedBy: string;
}

/**
 * Check if a given object implements the Event interface.
 */
export function instanceOfEvent(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "id" in value;
    isInstance = isInstance && "teamEvent" in value;
    isInstance = isInstance && "serverId" in value;
    isInstance = isInstance && "causedBy" in value;

    return isInstance;
}

export function EventFromJSON(json: any): Event {
    return EventFromJSONTyped(json, false);
}

export function EventFromJSONTyped(json: any, ignoreDiscriminator: boolean): Event {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': json['id'],
        'teamEvent': TeamEventFromJSON(json['teamEvent']),
        'summary': !exists(json, 'summary') ? undefined : json['summary'],
        'serverId': json['serverId'],
        'causedBy': json['causedBy'],
    };
}

export function EventToJSON(value?: Event | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'teamEvent': TeamEventToJSON(value.teamEvent),
        'summary': value.summary,
        'serverId': value.serverId,
        'causedBy': value.causedBy,
    };
}


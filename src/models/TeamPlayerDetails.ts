/* tslint:disable */
/* eslint-disable */
/**
 * Clash Bot Service
 * # Welcome to Clash Bot!   Where all of your League of Legends Clash scheduling needs are met!  ## Purpose  Clash Bot Webapp Service to support League of Legends Clash tournament scheduling with Discord.  ## Disclaimer  Clash-Bot is not endorsed by Riot Games and does not reflect the views or opinions of Riot Games or  anyone officially involved in producing or managing League of Legends. League of Legends and Riot Games  are trademarks or registered trademarks of Riot Games, Inc. League of Legends Â© Riot Games, Inc. 
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: rixxroid@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { TeamPlayer } from './TeamPlayer';
import {
    TeamPlayerFromJSON,
    TeamPlayerFromJSONTyped,
    TeamPlayerToJSON,
} from './TeamPlayer';

/**
 * The available positions a Player can be assigned to for a Team.
 * @export
 * @interface TeamPlayerDetails
 */
export interface TeamPlayerDetails {
    /**
     * 
     * @type {TeamPlayer}
     * @memberof TeamPlayerDetails
     */
    top?: TeamPlayer;
    /**
     * 
     * @type {TeamPlayer}
     * @memberof TeamPlayerDetails
     */
    mid?: TeamPlayer;
    /**
     * 
     * @type {TeamPlayer}
     * @memberof TeamPlayerDetails
     */
    jg?: TeamPlayer;
    /**
     * 
     * @type {TeamPlayer}
     * @memberof TeamPlayerDetails
     */
    bot?: TeamPlayer;
    /**
     * 
     * @type {TeamPlayer}
     * @memberof TeamPlayerDetails
     */
    supp?: TeamPlayer;
}

/**
 * Check if a given object implements the TeamPlayerDetails interface.
 */
export function instanceOfTeamPlayerDetails(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function TeamPlayerDetailsFromJSON(json: any): TeamPlayerDetails {
    return TeamPlayerDetailsFromJSONTyped(json, false);
}

export function TeamPlayerDetailsFromJSONTyped(json: any, ignoreDiscriminator: boolean): TeamPlayerDetails {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'top': !exists(json, 'Top') ? undefined : TeamPlayerFromJSON(json['Top']),
        'mid': !exists(json, 'Mid') ? undefined : TeamPlayerFromJSON(json['Mid']),
        'jg': !exists(json, 'Jg') ? undefined : TeamPlayerFromJSON(json['Jg']),
        'bot': !exists(json, 'Bot') ? undefined : TeamPlayerFromJSON(json['Bot']),
        'supp': !exists(json, 'Supp') ? undefined : TeamPlayerFromJSON(json['Supp']),
    };
}

export function TeamPlayerDetailsToJSON(value?: TeamPlayerDetails | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'Top': TeamPlayerToJSON(value.top),
        'Mid': TeamPlayerToJSON(value.mid),
        'Jg': TeamPlayerToJSON(value.jg),
        'Bot': TeamPlayerToJSON(value.bot),
        'Supp': TeamPlayerToJSON(value.supp),
    };
}


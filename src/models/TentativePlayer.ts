/* tslint:disable */
/* eslint-disable */
/**
 * Clash Bot Service
 * # Welcome to Clash Bot!   Where all of your League of Legends Clash scheduling needs are met!  ## Purpose  Clash Bot Webapp Service to support League of Legends Clash tournament scheduling with Discord.  ## Disclaimer  Clash-Bot is not endorsed by Riot Games and does not reflect the views or opinions of Riot Games or  anyone officially involved in producing or managing League of Legends. League of Legends and Riot Games  are trademarks or registered trademarks of Riot Games, Inc. League of Legends Â© Riot Games, Inc. 
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: rixxroid@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { Champion } from './Champion';
import {
    ChampionFromJSON,
    ChampionFromJSONTyped,
    ChampionToJSON,
} from './Champion';
import type { Role } from './Role';
import {
    RoleFromJSON,
    RoleFromJSONTyped,
    RoleToJSON,
} from './Role';

/**
 * A Player record with a subset of Player information for usage with Tentative queues.
 * @export
 * @interface TentativePlayer
 */
export interface TentativePlayer {
    /**
     * Discord Id for the Player
     * @type {string}
     * @memberof TentativePlayer
     */
    discordId?: string;
    /**
     * The Players discord name
     * @type {string}
     * @memberof TentativePlayer
     */
    name?: string;
    /**
     * A list of the Users preferred champions.
     * @type {Array<Champion>}
     * @memberof TentativePlayer
     */
    champions?: Array<Champion>;
    /**
     * 
     * @type {Role}
     * @memberof TentativePlayer
     */
    role?: Role;
}

/**
 * Check if a given object implements the TentativePlayer interface.
 */
export function instanceOfTentativePlayer(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function TentativePlayerFromJSON(json: any): TentativePlayer {
    return TentativePlayerFromJSONTyped(json, false);
}

export function TentativePlayerFromJSONTyped(json: any, ignoreDiscriminator: boolean): TentativePlayer {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'discordId': !exists(json, 'discordId') ? undefined : json['discordId'],
        'name': !exists(json, 'name') ? undefined : json['name'],
        'champions': !exists(json, 'champions') ? undefined : ((json['champions'] as Array<any>).map(ChampionFromJSON)),
        'role': !exists(json, 'role') ? undefined : RoleFromJSON(json['role']),
    };
}

export function TentativePlayerToJSON(value?: TentativePlayer | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'discordId': value.discordId,
        'name': value.name,
        'champions': value.champions === undefined ? undefined : ((value.champions as Array<any>).map(ChampionToJSON)),
        'role': RoleToJSON(value.role),
    };
}


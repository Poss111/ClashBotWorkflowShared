/* tslint:disable */
/* eslint-disable */
/**
 * Clash Bot Service
 * # Welcome to Clash Bot!   Where all of your League of Legends Clash scheduling needs are met!  ## Purpose  Clash Bot Webapp Service to support League of Legends Clash tournament scheduling with Discord.  ## Disclaimer  Clash-Bot is not endorsed by Riot Games and does not reflect the views or opinions of Riot Games or  anyone officially involved in producing or managing League of Legends. League of Legends and Riot Games  are trademarks or registered trademarks of Riot Games, Inc. League of Legends Â© Riot Games, Inc. 
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: rixxroid@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { Champion } from './Champion';
import {
    ChampionFromJSON,
    ChampionFromJSONTyped,
    ChampionToJSON,
} from './Champion';
import type { Role } from './Role';
import {
    RoleFromJSON,
    RoleFromJSONTyped,
    RoleToJSON,
} from './Role';
import type { Subscription } from './Subscription';
import {
    SubscriptionFromJSON,
    SubscriptionFromJSONTyped,
    SubscriptionToJSON,
} from './Subscription';

/**
 * A Clash Bot Player
 * @export
 * @interface Player
 */
export interface Player {
    /**
     * Discord Id for the Player
     * @type {string}
     * @memberof Player
     */
    discordId?: string;
    /**
     * The Players discord name
     * @type {string}
     * @memberof Player
     */
    name?: string;
    /**
     * 
     * @type {Role}
     * @memberof Player
     */
    role?: Role;
    /**
     * A list of the Users preferred champions.
     * @type {Array<Champion>}
     * @memberof Player
     */
    champions?: Array<Champion>;
    /**
     * 
     * @type {Array<Subscription>}
     * @memberof Player
     */
    subscriptions?: Array<Subscription>;
    /**
     * The Discord Server id that the User is defaulted to.
     * @type {string}
     * @memberof Player
     */
    serverId?: string;
    /**
     * The list of available Discord Servers for the player to filter by.
     * @type {Array<string>}
     * @memberof Player
     */
    selectedServers?: Array<string>;
}

/**
 * Check if a given object implements the Player interface.
 */
export function instanceOfPlayer(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function PlayerFromJSON(json: any): Player {
    return PlayerFromJSONTyped(json, false);
}

export function PlayerFromJSONTyped(json: any, ignoreDiscriminator: boolean): Player {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'discordId': !exists(json, 'discordId') ? undefined : json['discordId'],
        'name': !exists(json, 'name') ? undefined : json['name'],
        'role': !exists(json, 'role') ? undefined : RoleFromJSON(json['role']),
        'champions': !exists(json, 'champions') ? undefined : ((json['champions'] as Array<any>).map(ChampionFromJSON)),
        'subscriptions': !exists(json, 'subscriptions') ? undefined : ((json['subscriptions'] as Array<any>).map(SubscriptionFromJSON)),
        'serverId': !exists(json, 'serverId') ? undefined : json['serverId'],
        'selectedServers': !exists(json, 'selectedServers') ? undefined : json['selectedServers'],
    };
}

export function PlayerToJSON(value?: Player | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'discordId': value.discordId,
        'name': value.name,
        'role': RoleToJSON(value.role),
        'champions': value.champions === undefined ? undefined : ((value.champions as Array<any>).map(ChampionToJSON)),
        'subscriptions': value.subscriptions === undefined ? undefined : ((value.subscriptions as Array<any>).map(SubscriptionToJSON)),
        'serverId': value.serverId,
        'selectedServers': value.selectedServers,
    };
}


/* tslint:disable */
/* eslint-disable */
/**
 * Clash Bot Service
 * # Welcome to Clash Bot!   Where all of your League of Legends Clash scheduling needs are met!  ## Purpose  Clash Bot Webapp Service to support League of Legends Clash tournament scheduling with Discord.  ## Disclaimer  Clash-Bot is not endorsed by Riot Games and does not reflect the views or opinions of Riot Games or  anyone officially involved in producing or managing League of Legends. League of Legends and Riot Games  are trademarks or registered trademarks of Riot Games, Inc. League of Legends Â© Riot Games, Inc. 
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: rixxroid@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { BaseTournament } from './BaseTournament';
import {
    BaseTournamentFromJSON,
    BaseTournamentFromJSONTyped,
    BaseTournamentToJSON,
} from './BaseTournament';
import type { TeamPlayerDetails } from './TeamPlayerDetails';
import {
    TeamPlayerDetailsFromJSON,
    TeamPlayerDetailsFromJSONTyped,
    TeamPlayerDetailsToJSON,
} from './TeamPlayerDetails';

/**
 * A League of Legends Clash Team
 * @export
 * @interface Team
 */
export interface Team {
    /**
     * Unique identifier for a Team.
     * @type {string}
     * @memberof Team
     */
    id?: string;
    /**
     * The name of the Team.
     * @type {string}
     * @memberof Team
     */
    name?: string;
    /**
     * 
     * @type {TeamPlayerDetails}
     * @memberof Team
     */
    playerDetails?: TeamPlayerDetails;
    /**
     * The Discord server id that the Team belongs to.
     * @type {string}
     * @memberof Team
     */
    serverId?: string;
    /**
     * 
     * @type {BaseTournament}
     * @memberof Team
     */
    tournament?: BaseTournament;
    /**
     * The timestamp that the object was updated at
     * @type {Date}
     * @memberof Team
     */
    lastUpdatedAt?: Date;
}

/**
 * Check if a given object implements the Team interface.
 */
export function instanceOfTeam(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function TeamFromJSON(json: any): Team {
    return TeamFromJSONTyped(json, false);
}

export function TeamFromJSONTyped(json: any, ignoreDiscriminator: boolean): Team {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': !exists(json, 'id') ? undefined : json['id'],
        'name': !exists(json, 'name') ? undefined : json['name'],
        'playerDetails': !exists(json, 'playerDetails') ? undefined : TeamPlayerDetailsFromJSON(json['playerDetails']),
        'serverId': !exists(json, 'serverId') ? undefined : json['serverId'],
        'tournament': !exists(json, 'tournament') ? undefined : BaseTournamentFromJSON(json['tournament']),
        'lastUpdatedAt': !exists(json, 'lastUpdatedAt') ? undefined : (new Date(json['lastUpdatedAt'])),
    };
}

export function TeamToJSON(value?: Team | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'name': value.name,
        'playerDetails': TeamPlayerDetailsToJSON(value.playerDetails),
        'serverId': value.serverId,
        'tournament': BaseTournamentToJSON(value.tournament),
        'lastUpdatedAt': value.lastUpdatedAt === undefined ? undefined : (value.lastUpdatedAt.toISOString()),
    };
}


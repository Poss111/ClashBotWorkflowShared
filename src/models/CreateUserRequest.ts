/* tslint:disable */
/* eslint-disable */
/**
 * Clash Bot Service
 * # Welcome to Clash Bot!   Where all of your League of Legends Clash scheduling needs are met!  ## Purpose  Clash Bot Webapp Service to support League of Legends Clash tournament scheduling with Discord.  ## Disclaimer  Clash-Bot is not endorsed by Riot Games and does not reflect the views or opinions of Riot Games or  anyone officially involved in producing or managing League of Legends. League of Legends and Riot Games  are trademarks or registered trademarks of Riot Games, Inc. League of Legends Â© Riot Games, Inc. 
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: rixxroid@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface CreateUserRequest
 */
export interface CreateUserRequest {
    /**
     * The Discord id of the player
     * @type {string}
     * @memberof CreateUserRequest
     */
    discordId: string;
    /**
     * The Clash Bot User's name
     * @type {string}
     * @memberof CreateUserRequest
     */
    name: string;
    /**
     * The Discord Server that the player is using by default.
     * @type {string}
     * @memberof CreateUserRequest
     */
    serverId: string;
    /**
     * The list of available Discord Servers for the player to filter by.
     * @type {Array<string>}
     * @memberof CreateUserRequest
     */
    selectedGuilds?: Array<string>;
}

/**
 * Check if a given object implements the CreateUserRequest interface.
 */
export function instanceOfCreateUserRequest(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "discordId" in value;
    isInstance = isInstance && "name" in value;
    isInstance = isInstance && "serverId" in value;

    return isInstance;
}

export function CreateUserRequestFromJSON(json: any): CreateUserRequest {
    return CreateUserRequestFromJSONTyped(json, false);
}

export function CreateUserRequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): CreateUserRequest {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'discordId': json['discordId'],
        'name': json['name'],
        'serverId': json['serverId'],
        'selectedGuilds': !exists(json, 'selectedGuilds') ? undefined : json['selectedGuilds'],
    };
}

export function CreateUserRequestToJSON(value?: CreateUserRequest | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'discordId': value.discordId,
        'name': value.name,
        'serverId': value.serverId,
        'selectedGuilds': value.selectedGuilds,
    };
}

